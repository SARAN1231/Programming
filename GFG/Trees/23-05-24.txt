Given a BST and a key K. If K is not present in the BST, Insert a new Node with a value equal to K into the BST. If K is already present in the BST, don't modify the BST.

Example 1:

Input:
     2
   /   \   
  1     3
K = 4
Output: 
1 2 3 4
Explanation: 
After inserting the node 4
Inorder traversal will be 1 2 3 4.


#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* right;
    struct Node* left;
};


struct Node* createnode(int x) {
    struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = x;
    return newnode;
}
struct Node* insert(struct Node* root,int x){
    if(root == NULL) {
        root = createnode(x);
        return root;
    }
   
    if(x<root->data) {
         root->left = insert(root->left,x);
    }
    else if(x>root->data){
        root->right = insert(root->right,x);
    }
    
    return root;
}


void inorder(struct Node* root) {
    if(root == NULL) return ;
    
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}



int main(){
struct Node* root = NULL;
printf("Enter the element for BST(-1 for end)\n");
int x;
while(1) {
    scanf("%d",&x);
    if(x==-1) break;
    root = insert(root,x);
}

printf("Inorder Traversal\n");
inorder(root);
int y;
printf("\nEnter the key to insert ");
scanf("%d",&y);
root = insert(root,y);
printf("Inorder Traversal after inserting (if already present NO changes done)\n");
inorder(root);
}


Given a BST, and a reference to a Node x in the BST. Find the Inorder Successor of the given node in the BST.
 

Example 1:

Input:
      2
    /   \
   1     3
K(data of x) = 2
Output: 3 
Explanation: 
Inorder traversal : 1 2 3 
Hence, inorder successor of 2 is 3.


#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* right;
    struct Node* left;
};


struct Node* createnode(int x) {
    struct Node* newnode = (struct Node*)malloc(sizeof(struct Node));
    newnode->data = x;
    return newnode;
}
struct Node* insert(struct Node* root,int x){
    if(root == NULL) {
        root = createnode(x);
        return root;
    }
   
    if(x<root->data) {
         root->left = insert(root->left,x);
    }
    else if(x>root->data){
        root->right = insert(root->right,x);
    }
    
    return root;
}


struct Node* bstsearch(struct Node* root,int x){
    if(root == NULL || root->data == x) {
        struct Node* current = root->right;
    while(current && current->left != NULL){
        current = current->left;
    }
    return current;
    }
    if(x<root->data) return bstsearch(root->left,x);
    else return bstsearch(root->right,x);
    
}
int inordersucc(struct Node* root,int x) {
    struct Node* search = bstsearch(root,x);
    int k = search->data;
    return k;
}

void inorder(struct Node* root) {
    if(root == NULL) return ;
    
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}



int main(){
struct Node* root = NULL;
printf("Enter the element for BST(-1 for end)\n");
int x;
while(1) {
    scanf("%d",&x);
    if(x==-1) break;
    root = insert(root,x);
}

printf("Inorder Traversal\n");
inorder(root);
printf("\nEnter a element to find inorder succesor");
int y;
scanf("%d",&y);
printf("Inorder Successor of %d is %d ",y,inordersucc(root,y));
}