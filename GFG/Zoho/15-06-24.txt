
class Solution
{
    public String is_palindrome(int n)
    {
        // Code here
        int temp = n;
        int sum =0;
        while(n>0) {
            int rem = n%10;
            sum = sum*10 + rem;
            n/=10;
        }
        if(sum == temp) return "Yes";
        return "No";
    }
}

class Solution {
    String modify(String s) {
        s = s.toLowerCase(); 
        char[] ch = s.toCharArray();
        int l = 0;
        int r = s.length() - 1;

        while (l < r) {
            if ((ch[l] == 'a' || ch[l] == 'e' || ch[l] == 'i' || ch[l] == 'o' || ch[l] == 'u')
                && (ch[r] == 'a' || ch[r] == 'e' || ch[r] == 'i' || ch[r] == 'o' || ch[r] == 'u')) {

                char temp = ch[r];
                ch[r] = ch[l];
                ch[l] = temp;
                l++;
                r--;
            } else if (ch[l] == 'a' || ch[l] == 'e' || ch[l] == 'i' || ch[l] == 'o' || ch[l] == 'u') {
                r--;
            } else if (ch[r] == 'a' || ch[r] == 'e' || ch[r] == 'i' || ch[r] == 'o' || ch[r] == 'u') {
                l++;
            } else {
                l++;
                r--;
            }
        }
        return new String(ch); 
    }
}


class Solution {
    
   long reverse(long n) {
        long sum = 0;
        while (n > 0) {
            long rem = n % 10;
            sum = sum * 10 + rem;
            n /= 10;
        }
        return sum;
    }

    // Method to check if a number is a palindrome
    boolean isPalindrome(long n) {
        return n == reverse(n);
    }

    // Method to perform the reverse and add operation
    long palindrome(long n, int iterations) {
        if (iterations > 5) {
            return -1; // Return the number if iterations exceed 5
        }

        long reversed = reverse(n);
        long sum = n + reversed;

        if (isPalindrome(sum)) {
            return sum;
        } else {
            return palindrome(sum, iterations + 1);
        }
    }

    long isSumPalindrome(long n) {
        if(isPalindrome(n)) return n;
        return palindrome(n, 1); // Start with the first iteration
    }
}

class Solution
{
    public int distance(int x1, int y1, int x2, int y2)
    {
        // Code here
        int s = x2-x1;
        int d = y2-y1;
        
        double ans =Math.sqrt(s*s + d*d);
        int res = (int) Math.round(ans);
        return res;
    }
}

class Solution{
    boolean isSubSequence(String A, String B){
        
      int i=0;
      int j =0;
      while( i<A.length() && j<B.length()) {
          if(A.charAt(i) == B.charAt(j)) i++;
          j++;
      }
      return i == A.length();
    }
}

class Solution{
    static int isLeap(int N){
        //code here
  if ((N % 4 == 0 && N % 100 != 0) || (N % 400 == 0))  return 1;
        return 0;
    }
}

lass Solution{
    static String removeChars(String A, String B){
        // code here
        StringBuilder s =  new StringBuilder();
        for(int i=0;i<A.length();i++) {
            char ch = A.charAt(i);
            if(B.indexOf(ch) ==-1) s.append(ch);
       
        }
        return new String(s);
        
    }
}

class Solution {
    int totalCount(int[] arr, int n, int k) {
        int count = 0;
        for (int i = 0; i < n; i++) {
           count += (arr[i] + k - 1) / k;
        }
        return count;
    }
}