Given two binary trees, the task is to find if both of them are identical or not.
Note: You need to return true or false, the printing is done by the driver code.

Example 1:

Input:
     1          1
   /   \      /   \
  2     3    2     3
Output: 
Yes
Explanation: 
There are two trees both having 3 nodes and 2 edges, both trees are identical having the root as 1, left child of 1 is 2 and right child of 1 is 3.


class Solution {
    int result = 1;

public:
    void preorder(struct Node* root1, struct Node* root2) {
        if (root1 == NULL && root2 == NULL) return;
        if (root1 == NULL || root2 == NULL || root1->data != root2->data) {
            result = 0;
            return;
        }
        preorder(root1->left, root2->left);
        preorder(root1->right, root2->right);
    }

    // Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2) {
        preorder(r1, r2);
        return result;
    }
};

Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument. If no left view is possible, return an empty tree.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   

Example 1:

Input:
   1
 /  \
3    2
Output: 1 3


int arr[100];
int i =0;

void preorder(struct Node* root,int level) {
    if (root == NULL) return;
    
    // If this is the first node of its level, add it to the view
    if (i == level)
        arr[i++] = root->data;
    
    // Traverse left and right subtrees
    preorder(root->left, level + 1);
    preorder(root->right, level + 1);
}
//Function to return a list containing elements of left view of the binary tree.
vector<int> leftView(Node *root)
{
   // Your code here
   i=0;
   preorder(root,0);
   vector<int> result;
   for (int j = 0; j < i; j++) {
       result.push_back(arr[j]);
   }
   return result;
}


Given a Binary Tree, find Right view of it. Right view of a Binary Tree is set of nodes visible when tree is viewed from right side.

Right view of following tree is 1 3 7 8.

          1
       /     \
     2        3
   /   \      /    \
  4     5   6    7
    \
     8

Example 1:

Input:
       1
    /    \
   3      2
Output: 1 2


class Solution
{
    public:
    int arr[100];
    int i =0;
    
    void preorder(struct Node* root,int level) {
        if(root == NULL) return;
        if(i == level)
        arr[i++] = root->data;
        preorder(root->right,level+1);
        preorder(root->left,level+1);
    }
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       // Your Code here
       i = 0;
       preorder(root,0);
        vector<int> result;
   for (int j = 0; j < i; j++) {
       result.push_back(arr[j]);
   }
   return result;
    }
};

Given a binary tree, find its height.

Example 1:

Input:
     1
    /  \
   2    3
Output: 2
class Solution{
    public:
    
    int i = 0;
    void preorder(struct Node* root,int level) {
        if(root == NULL) return;
        if(i == level){
            i++;
             
        }
      
        preorder(root->left,level+1);
        preorder(root->right,level+1);
    }
    //Function to find the height of a binary tree.
    int height(struct Node* root){
        // code here 
        if(root == NULL) return 0;
        preorder(root,0);
        return i;
    }
};

