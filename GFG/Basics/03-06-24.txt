class Solution {
    int missingNumber(int a[], int n) {
        // Your Code Here
        int totalSum = n * (n + 1) / 2;
        int sum =0;
        for(int i=0;i<n-1;i++){
            sum+= a[i];
        }
        return totalSum - sum;
    }
}

class Solution
{
    //Function to find two repeated elements.
    public int[] twoRepeated(int arr[], int n)
    {
        // Your code here
         int j=0;
        HashSet <Integer> a = new HashSet<>();
        int[] res = new int[2];
       
      for(int i=0;i<n+2;i++) {
          if(a.contains(arr[i])){
              res[j++] = arr[i];
          }
          else {
              a.add(arr[i]);
          }
      }
     
        return res;
        
    }
    
}

class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        ArrayList<Integer> a = new ArrayList<>();
        HashSet<Integer> s = new HashSet<>();
        HashSet<Integer> d = new HashSet<>();

        for (int i = 0; i < n; i++) {
            if (s.contains(arr[i])) {
                if (!d.contains(arr[i])) {
                    a.add(arr[i]);
                    d.add(arr[i]);
                }
            } else {
                s.add(arr[i]);
            }
        }

        if (a.isEmpty()) {
            a.add(-1);
        }
Collections.sort(a);
        return a;
    }
}



class Solution {
    void pushZerosToEnd(int[] arr, int n) {
        // code here
        int c =0;
        for(int i=0;i<n;i++) {
            if(arr[i] != 0) {
                int temp = arr[i];
                arr[i] = arr[c];
                arr[c] = temp;
                c++;
            }
        }
        for(int i =c;i<n;i++) {
            arr[i] = 0;
        }
    }
}