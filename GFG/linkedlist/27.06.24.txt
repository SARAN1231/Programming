Given a singly linked list with N nodes and a number X. The task is to find the node at the given index (X)(1 based index) of linked list. 

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains space seperated two integers, length of linked list and X.

Output:
For each testcase, there will be single line of output containing data at Xth node.

User Task:
The task is to complete the function GetNth() which takes head reference and index as arguments and should return the data at Xth position in the linked list.

Constraints:
1 <= T <= 30
1 <= N <= 100
X <= N
1 <= value <= 103

Example:
Input:
2
6 5
1 2 3 4 657 76
10 2
8 7 10 8 6 1 20 91 21 2

Output:
657
7

Explanation:
Testcase 1: Element at 5th index in the linked list is 657 (1-based indexing).


int GetNth(struct node* head, int index){
  // Code here
  struct node *temp = head;
  int i = 1;
 
  while(i<index)
  {
      temp=temp->next;
      i++;
  }
  int ele = temp->data;
  return ele;
}

Given a doubly linked list and a position. The task is to delete a node from given position (position starts from 1) in a doubly linked list.

Example 1:

Input:
LinkedList = 1 <--> 3 <--> 4 
x = 3
Output: 1 3  
Explanation: After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.


Given a doubly linked list and a position. The task is to delete a node from given position (position starts from 1) in a doubly linked list.

Example 1:

Input:
LinkedList = 1 <--> 3 <--> 4 
x = 3
Output: 1 3  
Explanation: After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.


Given a linked list of size n, your task is to complete the function isLengthEvenOrOdd() which contains the head of the linked list and check whether the length of the linked list is even or odd.

Example1:

Input:
n = 3
linked list = 9->4->3
Output:
Odd
Explanation:
The length of linked list is 3 which is odd.

class Solution {
  public:
    int isLengthEvenOrOdd(struct Node* head) {
        // Code here
        struct Node* temp = head;
        int count = 0;
        while(temp!=NULL){
            temp=temp->next;
            count++;
        }
        if(count%2 ==0) return 0;
      
        return 1;
    }
};


Given a Singly Linked List of size n, delete all alternate nodes of the list.

 Example 1:

Input:
LinkedList: 1->2->3->4->5->6
Output: 1->3->5
Explanation: Deleting alternate nodes results in the linked list with elements 1->3->5.

class Solution{
    public:
    void deleteAlt(struct Node *head){
        // Code here
       if(head == NULL || head->next == NULL) return;
       struct Node *temp =head;
       struct Node *nextnode;
       while(temp != NULL && temp->next != NULL){
           nextnode = temp->next;
           temp->next = nextnode->next;
           free(nextnode);
           temp = temp->next;
       }
    }
};


 