Algorithm to implement a queue using two stacks:

Data Structures:

Stack s1 (main stack for enqueue operation)
Stack s2 (auxiliary stack for dequeue operation)
Enqueue Operation:

Input: element x
Push x onto s1
Dequeue Operation:

If both s1 and s2 are empty, return an error (Queue is empty)
If s2 is empty, transfer all elements from s1 to s2
Pop each element from s1 and push it onto s2
Pop the top element from s2 and return it as the dequeued element
Peek Operation (Front Operation):

If both s1 and s2 are empty, return an error (Queue is empty)
If s2 is empty, transfer all elements from s1 to s2
Pop each element from s1 and push it onto s2
Peek at the top element of s2 and return it as the front element of the queue

#include <stdio.h>
#define N1 3
int s1[N1];
int s2[N1];
int top1 = -1;
int top2 = -1;

void enqueue() {
     if(top1 == N1-1) {
        printf("Overflow\n");
        return;
    }
    int n;
    printf("Enter the Element");
    scanf("%d",&n);
    top1++;
    s1[top1] = n;
}

void dequeue() {
    if (top1 == -1 && top2 == -1) {
        printf("-1\n");
        return;
    }
    if(top2 == -1) {
        int j = top1;
        for(int i=j;i>=0;i--){
            
            s2[++top2] = s1[i];
            top1--;
            
        }
    }
    
  
    printf("dequeued elemnt -> %d\n",s2[top2]);
    top2--;
}

void peek(){
    if(top1 == -1) printf("underflow");
    printf("peek->%d\n",s1[top1]);
}

void display(){
    for(int i=0;i<=top1;i++){
        printf("%d ",s1[i]);
    }
    printf("\n");
}


int main()
{
    enqueue();
    enqueue();
    display();
    dequeue();
    display();
    enqueue();
    display();
    dequeue();
    
}
