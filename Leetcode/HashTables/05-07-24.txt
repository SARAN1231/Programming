class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        HashMap<Character,Integer> res = new HashMap<>();
        char[] ch = jewels.toCharArray();
        for(char c : ch) {
            res.put(c,res.getOrDefault(c,0)+1);
        }
        int count =0;
        for(int i=0;i<stones.length();i++) {
            if(res.containsKey(stones.charAt(i))) {
                count++;
            }
        }
        return count;
    }
}

class Solution {
    public boolean checkIfPangram(String sentence) {
        HashMap<Character,Integer> res = new HashMap<>();

        for(int i=0;i<sentence.length();i++) {
            res.put(sentence.charAt(i),1);
        }
      return res.size() == 26;
    }
}

class Solution {
    public int maximumNumberOfStringPairs(String[] words) {
        int count = 0;
        for (int i = 0; i < words.length - 1; i++) {
            for (int j = i + 1; j < words.length; j++) {
                if (isPalindromePair(words[i], words[j])) {
                    count++;
                }
            }
        }
        return count;
    }

    private boolean isPalindromePair(String s1, String s2) {
        int len = s1.length();
        if (len != s2.length()) {
            return false;
        }
        for (int i = 0; i < len; i++) {
            if (s1.charAt(i) != s2.charAt(len - 1 - i)) {
                return false;
            }
        }
        return true;
    }
}
