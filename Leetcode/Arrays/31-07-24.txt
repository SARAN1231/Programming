class Solution {
    public int countCompleteDayPairs(int[] hours) {
        int count =0;
        for(int i=0;i<hours.length-1;i++) {
            for(int j=i+1;j<hours.length;j++){
                if((hours[i]+hours[j])%24 ==0)count++;
            }
        }
        return count;
    }
}

class Solution {
    public boolean isArraySpecial(int[] nums) {
        for(int i=0;i<nums.length-1;i++) {
            if(nums[i]%2 == nums[i+1]%2) return false;
        }
        return true;
    }
}

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];
        int a =0;
        for(int i=0;i<nums1.length;i++) {
            for(int j=0;j<nums2.length;j++) {
                if(nums1[i] == nums2[j]){
                    for(int k=j+1;k<nums2.length;k++){
                        if(nums2[k] > nums1[i]){
                            ans[a++] = nums2[k];
                            break;
                        }
                        if(k==nums2.length-1) ans[a++] = -1;
                    }
                    if(j==nums2.length-1) ans[a++] = -1;
                }
            }
        }
        return ans;
    }
}

class Solution {
    public List<Integer> minSubsequence(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        Arrays.sort(nums);
        int sum1 =0;
        int sum2;
        for(int i=nums.length-1;i>=0;i--){
            ans.add(nums[i]);
            sum1+=nums[i];
            sum2 =0;
            for(int j=0;j<i;j++) {
                sum2+=nums[j];
            }
            if(sum1 > sum2) return ans;
        }
        return ans;
    }
}

class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int[] ans = new int[queries.length];
        
        int a =0;
        for(int i=0;i<queries.length;i++) {
            int sum1 =0;
            int count =0;
            for(int j=0;j<nums.length;j++) {
                if( sum1+nums[j] <= queries[i]){
                sum1+=nums[j];
                count++;
            }
            else break;
        }
        ans[i] = count;
    }
        return ans;
    }
}
