class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        int min = Integer.MAX_VALUE;
        for(int i=0;i<n-2;i++){
            int l = i+1;
            int r = n-1;
            while(l<r){
                int sum = (nums[i] + nums[l]+nums[r]);
                if(Math.abs(sum - target) < Math.abs(min-target)) {
                    min = sum;
                }
                if(sum < target)l++;
                else if(sum > target) r--;
                else return sum;
            }
        }
        return min;
    }
}

import java.util.*;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;  // Skip duplicates for i
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;  // Skip duplicates for j
                
                int l = j + 1;
                int r = n - 1;
                
                while (l < r) {
                    long sum = (long) nums[i] + nums[j] + nums[l] + nums[r];  // Use long to handle large sums
                    
                    if (sum < target) {
                        l++;
                    } else if (sum > target) {
                        r--;
                    } else {
                        res.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));
                        
                        // Skip duplicates for l and r
                        while (l < r && nums[l] == nums[l + 1]) l++;
                        while (l < r && nums[r] == nums[r - 1]) r--;
                        
                        l++;
                        r--;
                    }
                }
            }
        }
        
        return res;
    }
}


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = new int[2];
        arr[0] = -1;
        arr[1] = -1;
       
        for(int i=0;i<nums.length;i++){
            if(nums[i] == target) {
                if(arr[0] == -1) {
                    nums[i] =-1;
                    arr[0] = i;
                }
                arr[1] = i; 
            }
            
        }
        return arr;
    }
}

class Solution {
    public int lastStoneWeight(int[] stones) {
        List<Integer> list = new ArrayList<>();
        for(int i : stones) {
            list.add(i);
        }
        
        while(list.size() > 1 ){
            Collections.sort(list);
            if(list.get(list.size()-1) == list.get(list.size()-2)){
                list.remove(list.size()-1);
                list.remove(list.size()-1);
            }
            else{
                list.add(list.get(list.size()-1) - list.get(list.size()-2));
                list.remove(list.size()-2);
                list.remove(list.size()-2);
            }
        }
        return list.size() == 0 ? 0 : list.get(0);
    }
}

class Solution {
    public int distributeCandies(int[] c) {
        HashSet<Integer> set = new HashSet<>();
        int n = c.length;
        for(int i : c){
            set.add(i);
        }
        return set.size() < n/2 ? set.size() : n/2;
    }
}

class Solution {
    public boolean satisfiesConditions(int[][] grid) {
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                boolean belowExists = i+1 < grid.length;
                boolean rightExists = j+1 < grid[0].length;
                if(belowExists && grid[i][j] != grid[i+1][j]) return false;
                if(rightExists && grid[i][j] == grid[i][j+1]) return false;
            }
        }
        return true;
    }
}

class Solution {
    public int alternateDigitSum(int n) {
        String str = String.valueOf(n);
        char[] s = str.toCharArray();
        int esum =0;
        int osum =0;
        for(int i=0;i<s.length;i++){
            if(i%2 == 0) esum += s[i] - '0';
            else osum += s[i] - '0';
        }
        return esum - osum;
    }
}
