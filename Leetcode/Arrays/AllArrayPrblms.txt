class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        int min = Integer.MAX_VALUE;
        for(int i=0;i<n-2;i++){
            int l = i+1;
            int r = n-1;
            while(l<r){
                int sum = (nums[i] + nums[l]+nums[r]);
                if(Math.abs(sum - target) < Math.abs(min-target)) {
                    min = sum;
                }
                if(sum < target)l++;
                else if(sum > target) r--;
                else return sum;
            }
        }
        return min;
    }
}

import java.util.*;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;  // Skip duplicates for i
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;  // Skip duplicates for j
                
                int l = j + 1;
                int r = n - 1;
                
                while (l < r) {
                    long sum = (long) nums[i] + nums[j] + nums[l] + nums[r];  // Use long to handle large sums
                    
                    if (sum < target) {
                        l++;
                    } else if (sum > target) {
                        r--;
                    } else {
                        res.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));
                        
                        // Skip duplicates for l and r
                        while (l < r && nums[l] == nums[l + 1]) l++;
                        while (l < r && nums[r] == nums[r - 1]) r--;
                        
                        l++;
                        r--;
                    }
                }
            }
        }
        
        return res;
    }
}


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = new int[2];
        arr[0] = -1;
        arr[1] = -1;
       
        for(int i=0;i<nums.length;i++){
            if(nums[i] == target) {
                if(arr[0] == -1) {
                    nums[i] =-1;
                    arr[0] = i;
                }
                arr[1] = i; 
            }
            
        }
        return arr;
    }
}

class Solution {
    public int lastStoneWeight(int[] stones) {
        List<Integer> list = new ArrayList<>();
        for(int i : stones) {
            list.add(i);
        }
        
        while(list.size() > 1 ){
            Collections.sort(list);
            if(list.get(list.size()-1) == list.get(list.size()-2)){
                list.remove(list.size()-1);
                list.remove(list.size()-1);
            }
            else{
                list.add(list.get(list.size()-1) - list.get(list.size()-2));
                list.remove(list.size()-2);
                list.remove(list.size()-2);
            }
        }
        return list.size() == 0 ? 0 : list.get(0);
    }
}

class Solution {
    public int distributeCandies(int[] c) {
        HashSet<Integer> set = new HashSet<>();
        int n = c.length;
        for(int i : c){
            set.add(i);
        }
        return set.size() < n/2 ? set.size() : n/2;
    }
}

class Solution {
    public boolean satisfiesConditions(int[][] grid) {
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                boolean belowExists = i+1 < grid.length;
                boolean rightExists = j+1 < grid[0].length;
                if(belowExists && grid[i][j] != grid[i+1][j]) return false;
                if(rightExists && grid[i][j] == grid[i][j+1]) return false;
            }
        }
        return true;
    }
}

class Solution {
    public int alternateDigitSum(int n) {
        String str = String.valueOf(n);
        char[] s = str.toCharArray();
        int esum =0;
        int osum =0;
        for(int i=0;i<s.length;i++){
            if(i%2 == 0) esum += s[i] - '0';
            else osum += s[i] - '0';
        }
        return esum - osum;
    }
}class Solution {
    public boolean isIsomorphic(String s, String t) {
        HashMap<Character,Character> map = new HashMap<>();
        if(s.length() != t.length()) return false;
        for(int i=0;i<s.length();i++){
            char sc = s.charAt(i);
            char tc = t.charAt(i);
            if(map.containsKey(sc)){
                if(map.get(sc) != tc) return false;
            }
            else {
                if(map.containsValue(tc)){
                    return false;
                }
                map.put(sc,tc);
            }
        }
        return true;
    }
}

class Solution {
    public boolean wordPattern(String p, String s) {
        HashMap<Character,String> map = new HashMap<>();
        String[] str = s.split(" ");
        if(p.length() != str.length) return false;
        for(int i=0;i<p.length();i++){
            char pc = p.charAt(i);
            String sc = str[i];
            if(map.containsKey(pc)) {
                 if(!map.get(pc).equals(sc)) return false;
            }
            else {
                if(map.containsValue(sc)) return false;
                map.put(pc,sc);
            }
        }
        return true;
    }
}class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        ArrayList<String> arr = new ArrayList<>();
        int minsum = Integer.MAX_VALUE;
        int sum = 0;
    
        for(int i=0;i<list1.length;i++){
            for(int j=0;j<list2.length;j++){
                if(list1[i].equals(list2[j])){
                    sum = i+j;
                    if(sum < minsum) {
                        minsum = sum;
                        arr.clear();
                        arr.add(list1[i]);
                        
                    }
                    else if (sum == minsum) {
                        arr.add(list1[i]);
                    }
                }
            }
        }
        return arr.toArray(new String[arr.size()]);
    }
}

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

class Solution {
    public String mostCommonWord(String paragraph, String[] banned) {
        // Step 1: Remove punctuation and convert to lowercase
        String p = paragraph.replaceAll("[^A-Za-z ]", "").toLowerCase();
        
        // Step 2: Split the paragraph into words using the correct regex for spaces
        String[] str = p.split("\\s+");
        
        // Step 3: Add banned words to a set for quick lookup
        Set<String> set = new HashSet<>();
        for (String ban : banned) {
            set.add(ban);
        }

        // Step 4: Count the occurrence of each word, ignoring banned words
        HashMap<String, Integer> map = new HashMap<>();
        for (String s : str) {
            if (!set.contains(s) && !s.isEmpty()) {
                map.put(s, map.getOrDefault(s, 0) + 1);
            }
        }

        // Step 5: Find the most common word
        String mc = "";
        int maxCount = 0;
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                mc = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        
        return mc;
    }
}


class Solution {
    public int dominantIndex(int[] nums) {
        int[] temp = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            temp[i] = nums[i];
        }
         Arrays.sort(temp);
        int max = temp[temp.length-1];
        for(int i=temp.length-2;i>=0;i--){
            if(temp[i] * 2 > max) return -1;
        }
        int ans = -1;
        for(int i=0;i<nums.length;i++){
            if(max == nums[i]) {
                ans = i;
                break;
            }
        }
        return ans;
    }
}

class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        int[] res = new int[nums.length];
        int e = 0;
        int o = 1;
        for(int num : nums) {
            if(num %2 == 0) {
                res[e] = num;
                e+=2;
            }
            else {
                res[o] = num;
                o+=2;
            }
        }
        return res;
    }
    
    class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int product1 = nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3];
        int product2 = nums[0] * nums[1] * nums[nums.length - 1];
        return Math.max(product1,product2);
      
    }
}
}
