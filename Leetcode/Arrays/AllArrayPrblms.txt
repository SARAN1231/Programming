class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        int min = Integer.MAX_VALUE;
        for(int i=0;i<n-2;i++){
            int l = i+1;
            int r = n-1;
            while(l<r){
                int sum = (nums[i] + nums[l]+nums[r]);
                if(Math.abs(sum - target) < Math.abs(min-target)) {
                    min = sum;
                }
                if(sum < target)l++;
                else if(sum > target) r--;
                else return sum;
            }
        }
        return min;
    }
}

import java.util.*;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;  // Skip duplicates for i
            
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;  // Skip duplicates for j
                
                int l = j + 1;
                int r = n - 1;
                
                while (l < r) {
                    long sum = (long) nums[i] + nums[j] + nums[l] + nums[r];  // Use long to handle large sums
                    
                    if (sum < target) {
                        l++;
                    } else if (sum > target) {
                        r--;
                    } else {
                        res.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));
                        
                        // Skip duplicates for l and r
                        while (l < r && nums[l] == nums[l + 1]) l++;
                        while (l < r && nums[r] == nums[r - 1]) r--;
                        
                        l++;
                        r--;
                    }
                }
            }
        }
        
        return res;
    }
}

