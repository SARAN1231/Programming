class Solution {
    public int arithmeticTriplets(int[] nums, int diff) {
        int count = 0;
        for(int i =0;i<nums.length-2;i++){
            for(int j=0;j<nums.length-1;j++){
                for(int k =0;k<nums.length;k++){
                    if(nums[j]-nums[i] == diff && nums[k]-nums[j] == diff) count++;
                }
            }
        }
        return count;
    }
}

class Solution {
    public int countKDifference(int[] nums, int k) {
        int count =0;
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++) {
                if(Math.abs(nums[i]-nums[j])== k) count++;
            }
        }
        return count;
    }
}

class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int count =0;
        for(String s : words) {
            boolean res = true;
            for(int i=0;i<s.length();i++){
                if(allowed.indexOf(s.charAt(i)) == -1) {
                    res = false;
                    break;
                }
            }
            if(res) count++;
        }
        return count;
    }
}

class Solution {
    public int largestAltitude(int[] gain) {
         int max =0;
         
         for(int i=0;i<=gain.length;i++){
            int sum =0;
            for(int j=0;j<i;j++){
                sum+=gain[j];
            }
            if(sum>max) max = sum;
         }
         return max;
    }
}

class Solution {
    public int[] findIntersectionValues(int[] nums1, int[] nums2) {
        int[] ans =  new int[2];
        int count =0;
        for(int i=0;i<nums1.length;i++){
            for(int j=0;j<nums2.length;j++){
                if(nums1[i] == nums2[j]) {
                    count++;
                    break;
                }
            }
        }
        ans[0] = count;
        count =0;
         for(int i=0;i<nums2.length;i++){
            for(int j=0;j<nums1.length;j++){
                if(nums2[i] == nums1[j]) {
                    count++;
                    break;
                } 
            }
        }
        ans[1] = count;
        return ans;
    }
}

class Solution {
    public int duplicateNumbersXOR(int[] nums) {
        int[] freq = new int[51];
        for(int i : nums) {
            freq[i]++;
        }
        int sum =0;
        for(int i=0;i<freq.length;i++) {
            if(freq[i] > 1) {
                sum^=i;
            }
        }
        return sum;
    }
}

class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum =0;
        for(int i =0;i<arr.length;i++){
             List<Integer> res = new ArrayList<>();
             for(int j=i;j<arr.length;j++){
                res.add(arr[j]);
                if(res.size()%2 !=0) {
                    for(int k =0;k<res.size();k++){
                        sum+=res.get(k);
                    }
                }
             }
        }
        return sum;
    }
}
class Solution {
    public boolean isAcronym(List<String> words, String s) {
        if(s.length() != words.size() ) return false;
       
        for(int i=0;i<words.size();i++){
            if(words.get(i).charAt(0) != s.charAt(i)) return false;
        
        }
        return true;
    }
}