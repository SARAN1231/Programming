class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count =0;
    for(int i =0; i<nums.length-1;i++){
        for(int j=i+1;j<nums.length;j++) {
            if(nums[i] == nums[j]) count++;
        }
    }
    return count;
    }
}


class Solution {
    public int finalValueAfterOperations(String[] operations) {
        int count =0;
        for(String s : operations) {
            if(s.charAt(0) == '-' || s.charAt(2) =='-') count--;
            else count++;
        }
        return count;
    }
}

class Solution {
    public List<Integer> findWordsContaining(String[] words, char x) {
        List<Integer> res = new ArrayList<>();
        for(int j=0;j<words.length;j++) {
            for(int i =0;i<words[j].length();i++){
                if(words[j].charAt(i) == x) {
                    res.add(j);
                    break;
                }
            }
        }
        return res;
    }
}

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max = 0;
    
        for(int i =0;i<accounts.length;i++) {
                int sum =0;
            for(int j = 0;j<accounts[i].length;j++){
                sum+=accounts[i][j];
            }
            if(sum>max) max =sum;
        }
        return max;
    }
}