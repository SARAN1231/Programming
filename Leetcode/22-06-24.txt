class Solution {
    public boolean isPossibleToSplit(int[] nums) {
        HashMap<Integer,Integer> res = new HashMap<>();
        for(int i : nums) {
            res.put(i,res.getOrDefault(i,0)+1);
        }
        for(Map.Entry<Integer,Integer> entry : res.entrySet()){
            int k = entry.getKey();
            int v = entry.getValue();
            if(v>2) {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int i =0;
        int r = n;
        int[] res = new int[2*n];
        for(int k=0;k<2*n;k+=2) {
            res[k] = nums[i++];
            res[k+1] = nums[r++];
        }
        return res;
    }
}

class Solution {
    public boolean validMountainArray(int[] arr) {
        int i =0;
        int n = arr.length ;
        if(arr.length <3) return false;
        while(i <n-1 && arr[i] < arr[i+1]) {
            i++;
        }
        if(i == 0 || i == n-1) return false;
        while(i < n-1 && arr[i] > arr[i+1]) {
            i++;
        }
        return i == n-1;
    }
}